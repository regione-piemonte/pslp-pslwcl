/**
 * Portale Servizi Lavoro API
 * API per il backend del portale servizi lavoro.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AdesioneYG } from '../model/adesioneYG';
import { Calendario } from '../model/calendario';
import { CentroPerImpiego } from '../model/centroPerImpiego';
import { Cittadinanza } from '../model/cittadinanza';
import { Comune } from '../model/comune';
import { CondizioneOccupazionale } from '../model/condizioneOccupazionale';
import { ConfigurazioneInformazioneAggiuntiva } from '../model/configurazioneInformazioneAggiuntiva';
import { DatiInputStatoAdesione } from '../model/datiInputStatoAdesione';
import { Decodifica } from '../model/decodifica';
import { Documento } from '../model/documento';
import { DomandaRDC } from '../model/domandaRDC';
import { DomandeDidPage } from '../model/domandeDidPage';
import { ElenchiDecodifiche } from '../model/elenchiDecodifiche';
import { Ente } from '../model/ente';
import { ErrorDef } from '../model/errorDef';
import { Esito } from '../model/esito';
import { EsitoRiepilogoIscrizione } from '../model/esitoRiepilogoIscrizione';
import { EsitoSalvataggioIncontro } from '../model/esitoSalvataggioIncontro';
import { EsitoSendStatoAdesione } from '../model/esitoSendStatoAdesione';
import { EsitoVerificaEsistenzaSap } from '../model/esitoVerificaEsistenzaSap';
import { EsitoVerificaMinore } from '../model/esitoVerificaMinore';
import { GradoStudio } from '../model/gradoStudio';
import { InformazioneAggiuntiva } from '../model/informazioneAggiuntiva';
import { MenuHelpPage } from '../model/menuHelpPage';
import { MenuHomeCard } from '../model/menuHomeCard';
import { Messaggio } from '../model/messaggio';
import { MotivoPresenzaInItalia } from '../model/motivoPresenzaInItalia';
import { MotivoRilascioPermessoSoggiorno } from '../model/motivoRilascioPermessoSoggiorno';
import { Nazione } from '../model/nazione';
import { ParametriCalcoloProfilingYG } from '../model/parametriCalcoloProfilingYG';
import { ParametriRicercaDisponibilitaIncontri } from '../model/parametriRicercaDisponibilitaIncontri';
import { ParametriRicercaIncontriCalendario } from '../model/parametriRicercaIncontriCalendario';
import { ParametriRicercaPrimaDisponibilitaIncontri } from '../model/parametriRicercaPrimaDisponibilitaIncontri';
import { ParametriSalvataggioIncontro } from '../model/parametriSalvataggioIncontro';
import { ParametriSalvataggioSAP } from '../model/parametriSalvataggioSAP';
import { Parametro } from '../model/parametro';
import { PrenotazioneIncontro } from '../model/prenotazioneIncontro';
import { ProfilingYG } from '../model/profilingYG';
import { Provincia } from '../model/provincia';
import { SchedaAnagraficoProfessionale } from '../model/schedaAnagraficoProfessionale';
import { Sedime } from '../model/sedime';
import { SlotIncontro } from '../model/slotIncontro';
import { StatusExtraUE } from '../model/statusExtraUE';
import { TipoDocumento } from '../model/tipoDocumento';
import { TipoResponsabilita } from '../model/tipoResponsabilita';
import { TitoloStudio } from '../model/titoloStudio';
import { Utente } from '../model/utente';
import { UtenteACarico } from '../model/utenteACarico';


import { Configuration }                                     from '../configuration';


export interface BusinessServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * 
    * 
    * @param id_utente 
    * @param parametri 
    */
    calcolaProfilingYG(id_utente: number, parametri: ParametriCalcoloProfilingYG, extraHttpRequestParams?: any): Observable<ProfilingYG>;

    /**
    * 
    * 
    * @param id_documento 
    */
    deleteDocumento(id_documento: number, extraHttpRequestParams?: any): Observable<Esito>;

    /**
    * 
    * 
    * @param cod_ambito 
    */
    findAllTipiDocumenti(cod_ambito: string, extraHttpRequestParams?: any): Observable<Array<TipoDocumento>>;

    /**
    * 
    * 
    * @param parametriRicercaDisponibilitaIncontri 
    */
    findCalendario(parametriRicercaDisponibilitaIncontri: ParametriRicercaPrimaDisponibilitaIncontri, extraHttpRequestParams?: any): Observable<Calendario>;

    /**
    * 
    * 
    * @param id_utente 
    * @param cod_ambito 
    */
    findDocumenti(id_utente: number, cod_ambito: string, extraHttpRequestParams?: any): Observable<Array<Documento>>;

    /**
    * 
    * 
    * @param id_utente 
    * @param id_did 
    * @param cod_ambito 
    */
    findDocumentiPattiServizio(id_utente: number, id_did: number, cod_ambito: string, extraHttpRequestParams?: any): Observable<Array<Documento>>;

    /**
    * 
    * 
    * @param id_utente 
    * @param id_richiesta 
    * @param cod_ambito 
    */
    findDocumentiRichiestaIscrizione(id_utente: number, id_richiesta: number, cod_ambito: string, extraHttpRequestParams?: any): Observable<Array<Documento>>;

    /**
    * 
    * 
    */
    findElenchiDecodificheSap(extraHttpRequestParams?: any): Observable<ElenchiDecodifiche>;

    /**
    * 
    * 
    */
    findElencoStatusExtraUE(extraHttpRequestParams?: any): Observable<Array<StatusExtraUE>>;

    /**
    * 
    * 
    * @param id_utente 
    * @param cod_ambito 
    */
    findIncontri(id_utente: number, cod_ambito?: string, extraHttpRequestParams?: any): Observable<Array<PrenotazioneIncontro>>;

    /**
    * 
    * 
    * @param id_utente 
    * @param id_calendario identificativo in PSLP_T_CALENDARIO
    * @param parametri_ricerca_incontri_calendario 
    */
    findIncontriCalendario(id_utente: number, id_calendario: number, parametri_ricerca_incontri_calendario: ParametriRicercaIncontriCalendario, extraHttpRequestParams?: any): Observable<Array<PrenotazioneIncontro>>;

    /**
    * 
    * 
    * @param id_utente 
    * @param cod_ambito 
    */
    findInformazioniAggiuntive(id_utente: number, cod_ambito: string, extraHttpRequestParams?: any): Observable<Array<InformazioneAggiuntiva>>;

    /**
    * 
    * 
    * @param parametriRicercaDisponibilitaIncontri 
    */
    findIntervalloDisponibile(parametriRicercaDisponibilitaIncontri: ParametriRicercaPrimaDisponibilitaIncontri, extraHttpRequestParams?: any): Observable<Array<Date>>;

    /**
    * 
    * 
    */
    findMotiviRilascioPermessoDiSoggiorno(extraHttpRequestParams?: any): Observable<Array<MotivoRilascioPermessoSoggiorno>>;

    /**
    * 
    * 
    * @param id_utente 
    */
    findRiepilogoUtentiIscrizione(id_utente: number, extraHttpRequestParams?: any): Observable<EsitoRiepilogoIscrizione>;

    /**
    * 
    * 
    * @param id_utente 
    * @param id_calendario identificativo in PSLP_T_CALENDARIO
    * @param parametri_ricerca_incontri_calendario 
    */
    findSlotCalendario(id_utente: number, id_calendario: number, parametri_ricerca_incontri_calendario: ParametriRicercaIncontriCalendario, extraHttpRequestParams?: any): Observable<Array<SlotIncontro>>;

    /**
    * 
    * 
    * @param parametriRicercaDisponibilitaIncontri 
    */
    findSlots(parametriRicercaDisponibilitaIncontri: ParametriRicercaDisponibilitaIncontri, extraHttpRequestParams?: any): Observable<Array<SlotIncontro>>;

    /**
    * 
    * 
    * @param cod_ambito 
    * @param cod_tipo_utente tipologia di utente CIT, APL, CPI, REG
    * @param codice_ministeriale_comune_domicilio 
    * @param codice_ministeriale_comune_residenza 
    */
    findSportelli(cod_ambito: string, cod_tipo_utente: string, codice_ministeriale_comune_domicilio?: string, codice_ministeriale_comune_residenza?: string, extraHttpRequestParams?: any): Observable<Array<Ente>>;

    /**
    * 
    * 
    * @param cod_ambito 
    */
    findTipiDocumenti(cod_ambito: string, extraHttpRequestParams?: any): Observable<Array<TipoDocumento>>;

    /**
    * 
    * 
    */
    findTipiResponsabilita(extraHttpRequestParams?: any): Observable<Array<TipoResponsabilita>>;

    /**
    * 
    * 
    * @param id_utente 
    */
    findTutori(id_utente: number, extraHttpRequestParams?: any): Observable<Array<Utente>>;

    /**
    * 
    * 
    * @param id_utente 
    */
    findUtentiACarico(id_utente: number, extraHttpRequestParams?: any): Observable<Array<UtenteACarico>>;

    /**
    * 
    * 
    * @param id_utente 
    */
    getAdesioneYG(id_utente: number, extraHttpRequestParams?: any): Observable<AdesioneYG>;

    /**
    * 
    * 
    * @param id_silp 
    */
    getAdesioneYGBySILP(id_silp: number, extraHttpRequestParams?: any): Observable<AdesioneYG>;

    /**
    * 
    * 
    * @param id_cpi_silp 
    */
    getCentriPerImpiego(id_cpi_silp?: number, extraHttpRequestParams?: any): Observable<Array<CentroPerImpiego>>;

    /**
    * 
    * 
    */
    getCittadinanze(extraHttpRequestParams?: any): Observable<Array<Cittadinanza>>;

    /**
    * 
    * 
    * @param descrizione 
    * @param codice_provincia 
    * @param id_cpi_silp 
    */
    getComuni(descrizione?: string, codice_provincia?: string, id_cpi_silp?: number, extraHttpRequestParams?: any): Observable<Array<Comune>>;

    /**
    * 
    * 
    */
    getCondizioniOccupazionali(extraHttpRequestParams?: any): Observable<Array<CondizioneOccupazionale>>;

    /**
    * 
    * 
    * @param cod_ambito 
    * @param flag_all 
    */
    getConfigurazioniInformazioniAggiuntive(cod_ambito?: string, flag_all?: string, extraHttpRequestParams?: any): Observable<Array<ConfigurazioneInformazioneAggiuntiva>>;

    /**
    * 
    * 
    * @param codice_ministeriale_comune 
    */
    getCpiDelComune(codice_ministeriale_comune: string, extraHttpRequestParams?: any): Observable<any>;

    /**
    * 
    * 
    * @param codice_ministeriale_provincia 
    */
    getCpiDellaProvincia(codice_ministeriale_provincia: string, extraHttpRequestParams?: any): Observable<Array<CentroPerImpiego>>;

    /**
    * 
    * 
    * @param id_utente 
    */
    getDatiResponsabile(id_utente: number, extraHttpRequestParams?: any): Observable<SchedaAnagraficoProfessionale>;

    /**
    * 
    * 
    * @param id_utente 
    */
    getDomandaRDC(id_utente: number, extraHttpRequestParams?: any): Observable<DomandaRDC>;

    /**
    * 
    * 
    * @param id_silp 
    */
    getDomandaRDCBySILP(id_silp: number, extraHttpRequestParams?: any): Observable<DomandaRDC>;

    /**
    * 
    * 
    */
    getGradiStudio(extraHttpRequestParams?: any): Observable<Array<GradoStudio>>;

    /**
    * 
    * 
    */
    getGradiStudioSilp(extraHttpRequestParams?: any): Observable<Array<GradoStudio>>;

    /**
    * 
    * 
    */
    getMotiviPresenzaInItalia(extraHttpRequestParams?: any): Observable<Array<MotivoPresenzaInItalia>>;

    /**
    * 
    * 
    */
    getNazioni(extraHttpRequestParams?: any): Observable<Array<Nazione>>;

    /**
    * 
    * 
    * @param cod_parametro 
    */
    getParametro(cod_parametro: string, extraHttpRequestParams?: any): Observable<Parametro>;

    /**
    * 
    * 
    * @param id_utente 
    */
    getProfilingYG(id_utente: number, extraHttpRequestParams?: any): Observable<ProfilingYG>;

    /**
    * 
    * 
    */
    getProvince(extraHttpRequestParams?: any): Observable<Array<Provincia>>;

    /**
    * 
    * 
    * @param descrizione 
    * @param codice 
    */
    getQualificheProfessionali(descrizione: string, codice?: string, extraHttpRequestParams?: any): Observable<Array<Decodifica>>;

    /**
    * 
    * 
    * @param id_utente 
    * @param cod_ambito 
    */
    getSAP(id_utente: number, cod_ambito?: string, extraHttpRequestParams?: any): Observable<SchedaAnagraficoProfessionale>;

    /**
    * 
    * 
    * @param id_silp 
    * @param cod_ambito 
    */
    getSAPBySILP(id_silp: number, cod_ambito?: string, extraHttpRequestParams?: any): Observable<SchedaAnagraficoProfessionale>;

    /**
    * 
    * 
    * @param id_utente 
    */
    getSAPVuota(id_utente: number, extraHttpRequestParams?: any): Observable<SchedaAnagraficoProfessionale>;

    /**
    * 
    * 
    */
    getSedimi(extraHttpRequestParams?: any): Observable<Array<Sedime>>;

    /**
    * 
    * 
    * @param id_grado_studio_silp 
    */
    getTitoliStudio(id_grado_studio_silp?: number, extraHttpRequestParams?: any): Observable<Array<TitoloStudio>>;

    /**
    * 
    * 
    * @param id_grado_studio_silp 
    */
    getTitoliStudioSilp(id_grado_studio_silp?: number, extraHttpRequestParams?: any): Observable<Array<TitoloStudio>>;

    /**
    * 
    * 
    * @param codice_fiscale 
    */
    getUtenteByCf(codice_fiscale: string, extraHttpRequestParams?: any): Observable<Utente>;

    /**
    * 
    * 
    * @param id_utente 
    */
    getUtenteById(id_utente: number, extraHttpRequestParams?: any): Observable<Utente>;

    /**
    * 
    * 
    * @param id_documento 
    */
    loadDocumento(id_documento: number, extraHttpRequestParams?: any): Observable<Documento>;

    /**
    * 
    * 
    */
    loadDomandeDidPage(extraHttpRequestParams?: any): Observable<DomandeDidPage>;

    /**
    * 
    * 
    * @param cod_menu 
    */
    loadMenu(cod_menu: string, extraHttpRequestParams?: any): Observable<Array<MenuHomeCard>>;

    /**
    * 
    * 
    * @param cod_help 
    */
    loadMenuHelpPage(cod_help: string, extraHttpRequestParams?: any): Observable<MenuHelpPage>;

    /**
    * 
    * 
    * @param cod_messaggio 
    */
    loadMessaggio(cod_messaggio: string, extraHttpRequestParams?: any): Observable<Messaggio>;

    /**
    * 
    * 
    * @param documento 
    */
    saveDocumento(documento: Documento, extraHttpRequestParams?: any): Observable<Esito>;

    /**
    * 
    * 
    * @param parametriSalvataggioIncontro 
    */
    saveIncontro(parametriSalvataggioIncontro: ParametriSalvataggioIncontro, extraHttpRequestParams?: any): Observable<EsitoSalvataggioIncontro>;

    /**
    * 
    * 
    * @param id_utente 
    * @param informazione_aggiuntiva 
    */
    saveInformazioniAggiuntive(id_utente: number, informazione_aggiuntiva: InformazioneAggiuntiva, extraHttpRequestParams?: any): Observable<InformazioneAggiuntiva>;

    /**
    * 
    * 
    * @param id_utente 
    * @param utente 
    */
    saveResponsabile(id_utente: number, utente: SchedaAnagraficoProfessionale, extraHttpRequestParams?: any): Observable<Esito>;

    /**
    * 
    * 
    * @param id_utente 
    * @param parametri_sap 
    */
    saveSAP(id_utente: number, parametri_sap: ParametriSalvataggioSAP, extraHttpRequestParams?: any): Observable<Esito>;

    /**
    * 
    * 
    * @param documento 
    */
    saveStatoDocumento(documento: Documento, extraHttpRequestParams?: any): Observable<Esito>;

    /**
    * 
    * 
    * @param utente 
    */
    saveUtente(utente: Utente, extraHttpRequestParams?: any): Observable<Utente>;

    /**
    * 
    * 
    * @param id_utente 
    * @param utente 
    */
    saveUtenteACarico(id_utente: number, utente: UtenteACarico, extraHttpRequestParams?: any): Observable<Esito>;

    /**
    * 
    * 
    * @param id_utente 
    * @param parametri_sendStatoAdesione 
    */
    sendStatoAdesione(id_utente: number, parametri_sendStatoAdesione: DatiInputStatoAdesione, extraHttpRequestParams?: any): Observable<EsitoSendStatoAdesione>;

    /**
    * 
    * 
    * @param codice_fiscale 
    */
    verificaEsistenzaSAPSuSistemaMinisteriale(codice_fiscale: string, extraHttpRequestParams?: any): Observable<EsitoVerificaEsistenzaSap>;

    /**
    * 
    * 
    * @param id_utente 
    * @param codice_fiscale 
    * @param cod_ambito 
    */
    verificaMinore(id_utente: number, codice_fiscale: string, cod_ambito: string, extraHttpRequestParams?: any): Observable<EsitoVerificaMinore>;

}
