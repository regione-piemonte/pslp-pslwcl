/**
 * Portale Servizi Lavoro API
 * API per il backend del portale servizi lavoro.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Ambito } from '../model/ambito';
import { ConfigurazioneCalendario } from '../model/configurazioneCalendario';
import { ConfigurazioneCalendarioHeader } from '../model/configurazioneCalendarioHeader';
import { ConfigurazioneInformazioneAggiuntiva } from '../model/configurazioneInformazioneAggiuntiva';
import { ConfigurazioneMessaggiAggiuntivi } from '../model/configurazioneMessaggiAggiuntivi';
import { Ente } from '../model/ente';
import { ErrorDef } from '../model/errorDef';
import { Esito } from '../model/esito';
import { EsitoDuplicazionePeriodo } from '../model/esitoDuplicazionePeriodo';
import { Messaggio } from '../model/messaggio';
import { Operatore } from '../model/operatore';
import { ParametriDatoCalendari } from '../model/parametriDatoCalendari';
import { ParametriDuplicazioneCalendario } from '../model/parametriDuplicazioneCalendario';
import { ParametriDuplicazionePeriodo } from '../model/parametriDuplicazionePeriodo';
import { ParametriEccezioneCalendari } from '../model/parametriEccezioneCalendari';
import { ParametriEliminazioneEccezione } from '../model/parametriEliminazioneEccezione';
import { ParametriEliminazioneFascia } from '../model/parametriEliminazioneFascia';
import { ParametriRicercaCalendari } from '../model/parametriRicercaCalendari';
import { Sportello } from '../model/sportello';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { GestoreServiceInterface }                            from './gestore.serviceInterface';


@Injectable()
export class GestoreService implements GestoreServiceInterface {

    protected basePath = 'http://localhost:8080/restfacade/be';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param id_utente 
     * @param parametriDatoCalendari 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public applicaDatoACalendari(id_utente: number, parametriDatoCalendari: ParametriDatoCalendari, observe?: 'body', reportProgress?: boolean): Observable<Esito>;
    public applicaDatoACalendari(id_utente: number, parametriDatoCalendari: ParametriDatoCalendari, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Esito>>;
    public applicaDatoACalendari(id_utente: number, parametriDatoCalendari: ParametriDatoCalendari, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Esito>>;
    public applicaDatoACalendari(id_utente: number, parametriDatoCalendari: ParametriDatoCalendari, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling applicaDatoACalendari.');
        }
        if (parametriDatoCalendari === null || parametriDatoCalendari === undefined) {
            throw new Error('Required parameter parametriDatoCalendari was null or undefined when calling applicaDatoACalendari.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Esito>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/applica_dato_a_calendari`,
            parametriDatoCalendari,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param parametriEccezioneCalendari 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public applicaEccezioneACalendari(id_utente: number, parametriEccezioneCalendari: ParametriEccezioneCalendari, observe?: 'body', reportProgress?: boolean): Observable<Esito>;
    public applicaEccezioneACalendari(id_utente: number, parametriEccezioneCalendari: ParametriEccezioneCalendari, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Esito>>;
    public applicaEccezioneACalendari(id_utente: number, parametriEccezioneCalendari: ParametriEccezioneCalendari, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Esito>>;
    public applicaEccezioneACalendari(id_utente: number, parametriEccezioneCalendari: ParametriEccezioneCalendari, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling applicaEccezioneACalendari.');
        }
        if (parametriEccezioneCalendari === null || parametriEccezioneCalendari === undefined) {
            throw new Error('Required parameter parametriEccezioneCalendari was null or undefined when calling applicaEccezioneACalendari.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Esito>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/applica_eccezione_a_calendari`,
            parametriEccezioneCalendari,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param id_calendario identificativo in PSLP_T_CALENDARIO
     * @param parametri_duplicazione_calendario 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public duplicaCalendario(id_utente: number, id_calendario: number, parametri_duplicazione_calendario: ParametriDuplicazioneCalendario, observe?: 'body', reportProgress?: boolean): Observable<ConfigurazioneCalendario>;
    public duplicaCalendario(id_utente: number, id_calendario: number, parametri_duplicazione_calendario: ParametriDuplicazioneCalendario, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurazioneCalendario>>;
    public duplicaCalendario(id_utente: number, id_calendario: number, parametri_duplicazione_calendario: ParametriDuplicazioneCalendario, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurazioneCalendario>>;
    public duplicaCalendario(id_utente: number, id_calendario: number, parametri_duplicazione_calendario: ParametriDuplicazioneCalendario, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling duplicaCalendario.');
        }
        if (id_calendario === null || id_calendario === undefined) {
            throw new Error('Required parameter id_calendario was null or undefined when calling duplicaCalendario.');
        }
        if (parametri_duplicazione_calendario === null || parametri_duplicazione_calendario === undefined) {
            throw new Error('Required parameter parametri_duplicazione_calendario was null or undefined when calling duplicaCalendario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ConfigurazioneCalendario>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/calendari/${encodeURIComponent(String(id_calendario))}/duplica_calendario`,
            parametri_duplicazione_calendario,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param parametri_duplicazione_periodo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public duplicaPeriodo(id_utente: number, parametri_duplicazione_periodo: ParametriDuplicazionePeriodo, observe?: 'body', reportProgress?: boolean): Observable<EsitoDuplicazionePeriodo>;
    public duplicaPeriodo(id_utente: number, parametri_duplicazione_periodo: ParametriDuplicazionePeriodo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EsitoDuplicazionePeriodo>>;
    public duplicaPeriodo(id_utente: number, parametri_duplicazione_periodo: ParametriDuplicazionePeriodo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EsitoDuplicazionePeriodo>>;
    public duplicaPeriodo(id_utente: number, parametri_duplicazione_periodo: ParametriDuplicazionePeriodo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling duplicaPeriodo.');
        }
        if (parametri_duplicazione_periodo === null || parametri_duplicazione_periodo === undefined) {
            throw new Error('Required parameter parametri_duplicazione_periodo was null or undefined when calling duplicaPeriodo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EsitoDuplicazionePeriodo>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/periodi/duplica_periodo`,
            parametri_duplicazione_periodo,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param id_calendario identificativo in PSLP_T_CALENDARIO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eliminaCalendario(id_utente: number, id_calendario: number, observe?: 'body', reportProgress?: boolean): Observable<Esito>;
    public eliminaCalendario(id_utente: number, id_calendario: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Esito>>;
    public eliminaCalendario(id_utente: number, id_calendario: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Esito>>;
    public eliminaCalendario(id_utente: number, id_calendario: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling eliminaCalendario.');
        }
        if (id_calendario === null || id_calendario === undefined) {
            throw new Error('Required parameter id_calendario was null or undefined when calling eliminaCalendario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Esito>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/calendari/${encodeURIComponent(String(id_calendario))}/elimina_calendario`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param parametri_eliminazione_eccezione 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eliminaEccezione(id_utente: number, parametri_eliminazione_eccezione: ParametriEliminazioneEccezione, observe?: 'body', reportProgress?: boolean): Observable<Esito>;
    public eliminaEccezione(id_utente: number, parametri_eliminazione_eccezione: ParametriEliminazioneEccezione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Esito>>;
    public eliminaEccezione(id_utente: number, parametri_eliminazione_eccezione: ParametriEliminazioneEccezione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Esito>>;
    public eliminaEccezione(id_utente: number, parametri_eliminazione_eccezione: ParametriEliminazioneEccezione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling eliminaEccezione.');
        }
        if (parametri_eliminazione_eccezione === null || parametri_eliminazione_eccezione === undefined) {
            throw new Error('Required parameter parametri_eliminazione_eccezione was null or undefined when calling eliminaEccezione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Esito>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/elimina_eccezione`,
            parametri_eliminazione_eccezione,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param parametri_eliminazione_fascia 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eliminaFascia(id_utente: number, parametri_eliminazione_fascia: ParametriEliminazioneFascia, observe?: 'body', reportProgress?: boolean): Observable<Esito>;
    public eliminaFascia(id_utente: number, parametri_eliminazione_fascia: ParametriEliminazioneFascia, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Esito>>;
    public eliminaFascia(id_utente: number, parametri_eliminazione_fascia: ParametriEliminazioneFascia, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Esito>>;
    public eliminaFascia(id_utente: number, parametri_eliminazione_fascia: ParametriEliminazioneFascia, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling eliminaFascia.');
        }
        if (parametri_eliminazione_fascia === null || parametri_eliminazione_fascia === undefined) {
            throw new Error('Required parameter parametri_eliminazione_fascia was null or undefined when calling eliminaFascia.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Esito>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/elimina_fascia`,
            parametri_eliminazione_fascia,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param parametriRicercaCalendari 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findCalendari(id_utente: number, parametriRicercaCalendari: ParametriRicercaCalendari, observe?: 'body', reportProgress?: boolean): Observable<Array<ConfigurazioneCalendarioHeader>>;
    public findCalendari(id_utente: number, parametriRicercaCalendari: ParametriRicercaCalendari, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ConfigurazioneCalendarioHeader>>>;
    public findCalendari(id_utente: number, parametriRicercaCalendari: ParametriRicercaCalendari, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ConfigurazioneCalendarioHeader>>>;
    public findCalendari(id_utente: number, parametriRicercaCalendari: ParametriRicercaCalendari, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling findCalendari.');
        }
        if (parametriRicercaCalendari === null || parametriRicercaCalendari === undefined) {
            throw new Error('Required parameter parametriRicercaCalendari was null or undefined when calling findCalendari.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<ConfigurazioneCalendarioHeader>>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/calendari`,
            parametriRicercaCalendari,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param id_periodo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generaSlot(id_utente: number, id_periodo: number, observe?: 'body', reportProgress?: boolean): Observable<Esito>;
    public generaSlot(id_utente: number, id_periodo: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Esito>>;
    public generaSlot(id_utente: number, id_periodo: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Esito>>;
    public generaSlot(id_utente: number, id_periodo: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling generaSlot.');
        }
        if (id_periodo === null || id_periodo === undefined) {
            throw new Error('Required parameter id_periodo was null or undefined when calling generaSlot.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Esito>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/periodi/${encodeURIComponent(String(id_periodo))}/genera_slot`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAmbiti(id_utente: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Ambito>>;
    public getAmbiti(id_utente: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Ambito>>>;
    public getAmbiti(id_utente: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Ambito>>>;
    public getAmbiti(id_utente: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling getAmbiti.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Ambito>>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/ambiti`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param cod_tipo_utente tipologia di utente CIT, APL, CPI, REG
     * @param modalita I&#x3D;Inserimento, M&#x3D;Modifica
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEnti(id_utente: number, cod_tipo_utente: string, modalita: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Ente>>;
    public getEnti(id_utente: number, cod_tipo_utente: string, modalita: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Ente>>>;
    public getEnti(id_utente: number, cod_tipo_utente: string, modalita: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Ente>>>;
    public getEnti(id_utente: number, cod_tipo_utente: string, modalita: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling getEnti.');
        }
        if (cod_tipo_utente === null || cod_tipo_utente === undefined) {
            throw new Error('Required parameter cod_tipo_utente was null or undefined when calling getEnti.');
        }
        if (modalita === null || modalita === undefined) {
            throw new Error('Required parameter modalita was null or undefined when calling getEnti.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cod_tipo_utente !== undefined && cod_tipo_utente !== null) {
            queryParameters = queryParameters.set('cod_tipo_utente', <any>cod_tipo_utente);
        }
        if (modalita !== undefined && modalita !== null) {
            queryParameters = queryParameters.set('modalita', <any>modalita);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Ente>>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/enti`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMessaggi(id_utente: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Messaggio>>;
    public getMessaggi(id_utente: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Messaggio>>>;
    public getMessaggi(id_utente: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Messaggio>>>;
    public getMessaggi(id_utente: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling getMessaggi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Messaggio>>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/messaggi`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param codice_fiscale 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOperatoreByCf(codice_fiscale: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Operatore>>;
    public getOperatoreByCf(codice_fiscale: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Operatore>>>;
    public getOperatoreByCf(codice_fiscale: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Operatore>>>;
    public getOperatoreByCf(codice_fiscale: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (codice_fiscale === null || codice_fiscale === undefined) {
            throw new Error('Required parameter codice_fiscale was null or undefined when calling getOperatoreByCf.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Operatore>>(`${this.basePath}/operatore/${encodeURIComponent(String(codice_fiscale))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param cod_tipo_utente tipologia di utente CIT, APL, CPI, REG
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSportelli(id_utente: number, cod_tipo_utente: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Sportello>>;
    public getSportelli(id_utente: number, cod_tipo_utente: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Sportello>>>;
    public getSportelli(id_utente: number, cod_tipo_utente: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Sportello>>>;
    public getSportelli(id_utente: number, cod_tipo_utente: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling getSportelli.');
        }
        if (cod_tipo_utente === null || cod_tipo_utente === undefined) {
            throw new Error('Required parameter cod_tipo_utente was null or undefined when calling getSportelli.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cod_tipo_utente !== undefined && cod_tipo_utente !== null) {
            queryParameters = queryParameters.set('cod_tipo_utente', <any>cod_tipo_utente);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Sportello>>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/sportelli`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param id_calendario identificativo in PSLP_T_CALENDARIO
     * @param flag_blocco_calendario 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public impostaBloccoCalendario(id_utente: number, id_calendario: number, flag_blocco_calendario: boolean, observe?: 'body', reportProgress?: boolean): Observable<Esito>;
    public impostaBloccoCalendario(id_utente: number, id_calendario: number, flag_blocco_calendario: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Esito>>;
    public impostaBloccoCalendario(id_utente: number, id_calendario: number, flag_blocco_calendario: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Esito>>;
    public impostaBloccoCalendario(id_utente: number, id_calendario: number, flag_blocco_calendario: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling impostaBloccoCalendario.');
        }
        if (id_calendario === null || id_calendario === undefined) {
            throw new Error('Required parameter id_calendario was null or undefined when calling impostaBloccoCalendario.');
        }
        if (flag_blocco_calendario === null || flag_blocco_calendario === undefined) {
            throw new Error('Required parameter flag_blocco_calendario was null or undefined when calling impostaBloccoCalendario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Esito>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/calendari/${encodeURIComponent(String(id_calendario))}/imposta_blocco_calendario/${encodeURIComponent(String(flag_blocco_calendario))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param id_calendario 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadCalendario(id_utente: number, id_calendario: number, observe?: 'body', reportProgress?: boolean): Observable<ConfigurazioneCalendario>;
    public loadCalendario(id_utente: number, id_calendario: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurazioneCalendario>>;
    public loadCalendario(id_utente: number, id_calendario: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurazioneCalendario>>;
    public loadCalendario(id_utente: number, id_calendario: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling loadCalendario.');
        }
        if (id_calendario === null || id_calendario === undefined) {
            throw new Error('Required parameter id_calendario was null or undefined when calling loadCalendario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ConfigurazioneCalendario>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/calendari/${encodeURIComponent(String(id_calendario))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param cod_ambito 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadMessaggiAggiuntiviAmbito(id_utente: number, cod_ambito?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ConfigurazioneMessaggiAggiuntivi>>;
    public loadMessaggiAggiuntiviAmbito(id_utente: number, cod_ambito?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ConfigurazioneMessaggiAggiuntivi>>>;
    public loadMessaggiAggiuntiviAmbito(id_utente: number, cod_ambito?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ConfigurazioneMessaggiAggiuntivi>>>;
    public loadMessaggiAggiuntiviAmbito(id_utente: number, cod_ambito?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling loadMessaggiAggiuntiviAmbito.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cod_ambito !== undefined && cod_ambito !== null) {
            queryParameters = queryParameters.set('cod_ambito', <any>cod_ambito);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ConfigurazioneMessaggiAggiuntivi>>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/messaggi_aggiuntivi`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param configurazione_calendario 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveCalendarioDatiGenerali(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe?: 'body', reportProgress?: boolean): Observable<ConfigurazioneCalendario>;
    public saveCalendarioDatiGenerali(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurazioneCalendario>>;
    public saveCalendarioDatiGenerali(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurazioneCalendario>>;
    public saveCalendarioDatiGenerali(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling saveCalendarioDatiGenerali.');
        }
        if (configurazione_calendario === null || configurazione_calendario === undefined) {
            throw new Error('Required parameter configurazione_calendario was null or undefined when calling saveCalendarioDatiGenerali.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ConfigurazioneCalendario>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/save_calendario_dati_generali`,
            configurazione_calendario,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param configurazione_calendario 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveCalendarioDatiOperativi(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe?: 'body', reportProgress?: boolean): Observable<ConfigurazioneCalendario>;
    public saveCalendarioDatiOperativi(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurazioneCalendario>>;
    public saveCalendarioDatiOperativi(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurazioneCalendario>>;
    public saveCalendarioDatiOperativi(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling saveCalendarioDatiOperativi.');
        }
        if (configurazione_calendario === null || configurazione_calendario === undefined) {
            throw new Error('Required parameter configurazione_calendario was null or undefined when calling saveCalendarioDatiOperativi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ConfigurazioneCalendario>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/save_calendario_dati_operativi`,
            configurazione_calendario,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param configurazione_calendario 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveCalendarioEccezioni(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe?: 'body', reportProgress?: boolean): Observable<ConfigurazioneCalendario>;
    public saveCalendarioEccezioni(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurazioneCalendario>>;
    public saveCalendarioEccezioni(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurazioneCalendario>>;
    public saveCalendarioEccezioni(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling saveCalendarioEccezioni.');
        }
        if (configurazione_calendario === null || configurazione_calendario === undefined) {
            throw new Error('Required parameter configurazione_calendario was null or undefined when calling saveCalendarioEccezioni.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ConfigurazioneCalendario>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/save_calendario_eccezioni`,
            configurazione_calendario,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param configurazione_calendario 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveCalendarioFasce(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe?: 'body', reportProgress?: boolean): Observable<ConfigurazioneCalendario>;
    public saveCalendarioFasce(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurazioneCalendario>>;
    public saveCalendarioFasce(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurazioneCalendario>>;
    public saveCalendarioFasce(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling saveCalendarioFasce.');
        }
        if (configurazione_calendario === null || configurazione_calendario === undefined) {
            throw new Error('Required parameter configurazione_calendario was null or undefined when calling saveCalendarioFasce.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ConfigurazioneCalendario>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/save_calendario_fasce`,
            configurazione_calendario,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param configurazione_calendario 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveCalendarioMail(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe?: 'body', reportProgress?: boolean): Observable<ConfigurazioneCalendario>;
    public saveCalendarioMail(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurazioneCalendario>>;
    public saveCalendarioMail(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurazioneCalendario>>;
    public saveCalendarioMail(id_utente: number, configurazione_calendario: ConfigurazioneCalendario, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling saveCalendarioMail.');
        }
        if (configurazione_calendario === null || configurazione_calendario === undefined) {
            throw new Error('Required parameter configurazione_calendario was null or undefined when calling saveCalendarioMail.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ConfigurazioneCalendario>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/save_calendario_mail`,
            configurazione_calendario,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param messaggio 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveConfigurazioneInformazioniAggiuntive(id_utente: number, messaggio: ConfigurazioneInformazioneAggiuntiva, observe?: 'body', reportProgress?: boolean): Observable<ConfigurazioneInformazioneAggiuntiva>;
    public saveConfigurazioneInformazioniAggiuntive(id_utente: number, messaggio: ConfigurazioneInformazioneAggiuntiva, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurazioneInformazioneAggiuntiva>>;
    public saveConfigurazioneInformazioniAggiuntive(id_utente: number, messaggio: ConfigurazioneInformazioneAggiuntiva, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurazioneInformazioneAggiuntiva>>;
    public saveConfigurazioneInformazioniAggiuntive(id_utente: number, messaggio: ConfigurazioneInformazioneAggiuntiva, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling saveConfigurazioneInformazioniAggiuntive.');
        }
        if (messaggio === null || messaggio === undefined) {
            throw new Error('Required parameter messaggio was null or undefined when calling saveConfigurazioneInformazioniAggiuntive.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ConfigurazioneInformazioneAggiuntiva>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/save_configurazione_informazioni_aggiuntive`,
            messaggio,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param messaggi 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveMessaggiAggiuntiviAmbito(id_utente: number, messaggi: ConfigurazioneMessaggiAggiuntivi, observe?: 'body', reportProgress?: boolean): Observable<Esito>;
    public saveMessaggiAggiuntiviAmbito(id_utente: number, messaggi: ConfigurazioneMessaggiAggiuntivi, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Esito>>;
    public saveMessaggiAggiuntiviAmbito(id_utente: number, messaggi: ConfigurazioneMessaggiAggiuntivi, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Esito>>;
    public saveMessaggiAggiuntiviAmbito(id_utente: number, messaggi: ConfigurazioneMessaggiAggiuntivi, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling saveMessaggiAggiuntiviAmbito.');
        }
        if (messaggi === null || messaggi === undefined) {
            throw new Error('Required parameter messaggi was null or undefined when calling saveMessaggiAggiuntiviAmbito.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Esito>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/save_messaggi_aggiuntivi`,
            messaggi,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param messaggio 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveMessaggio(id_utente: number, messaggio: Messaggio, observe?: 'body', reportProgress?: boolean): Observable<Messaggio>;
    public saveMessaggio(id_utente: number, messaggio: Messaggio, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Messaggio>>;
    public saveMessaggio(id_utente: number, messaggio: Messaggio, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Messaggio>>;
    public saveMessaggio(id_utente: number, messaggio: Messaggio, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling saveMessaggio.');
        }
        if (messaggio === null || messaggio === undefined) {
            throw new Error('Required parameter messaggio was null or undefined when calling saveMessaggio.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Messaggio>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/save_messaggio`,
            messaggio,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param id_calendario identificativo in PSLP_T_CALENDARIO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public verificaVincoliEliminazioneCalendario(id_utente: number, id_calendario: number, observe?: 'body', reportProgress?: boolean): Observable<Esito>;
    public verificaVincoliEliminazioneCalendario(id_utente: number, id_calendario: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Esito>>;
    public verificaVincoliEliminazioneCalendario(id_utente: number, id_calendario: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Esito>>;
    public verificaVincoliEliminazioneCalendario(id_utente: number, id_calendario: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling verificaVincoliEliminazioneCalendario.');
        }
        if (id_calendario === null || id_calendario === undefined) {
            throw new Error('Required parameter id_calendario was null or undefined when calling verificaVincoliEliminazioneCalendario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Esito>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/calendari/${encodeURIComponent(String(id_calendario))}/vincoli_eliminazione_calendario`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
