/**
 * Portale Servizi Lavoro API
 * API per il backend del portale servizi lavoro.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AdesioneYG } from '../model/adesioneYG';
import { Calendario } from '../model/calendario';
import { CentroPerImpiego } from '../model/centroPerImpiego';
import { Cittadinanza } from '../model/cittadinanza';
import { Comune } from '../model/comune';
import { CondizioneOccupazionale } from '../model/condizioneOccupazionale';
import { ConfigurazioneInformazioneAggiuntiva } from '../model/configurazioneInformazioneAggiuntiva';
import { DatiInputStatoAdesione } from '../model/datiInputStatoAdesione';
import { Decodifica } from '../model/decodifica';
import { Documento } from '../model/documento';
import { DomandaRDC } from '../model/domandaRDC';
import { DomandeDidPage } from '../model/domandeDidPage';
import { ElenchiDecodifiche } from '../model/elenchiDecodifiche';
import { Ente } from '../model/ente';
import { ErrorDef } from '../model/errorDef';
import { Esito } from '../model/esito';
import { EsitoRiepilogoIscrizione } from '../model/esitoRiepilogoIscrizione';
import { EsitoSalvataggioIncontro } from '../model/esitoSalvataggioIncontro';
import { EsitoSendStatoAdesione } from '../model/esitoSendStatoAdesione';
import { EsitoVerificaEsistenzaSap } from '../model/esitoVerificaEsistenzaSap';
import { EsitoVerificaMinore } from '../model/esitoVerificaMinore';
import { GradoStudio } from '../model/gradoStudio';
import { InformazioneAggiuntiva } from '../model/informazioneAggiuntiva';
import { MenuHelpPage } from '../model/menuHelpPage';
import { MenuHomeCard } from '../model/menuHomeCard';
import { Messaggio } from '../model/messaggio';
import { MotivoPresenzaInItalia } from '../model/motivoPresenzaInItalia';
import { MotivoRilascioPermessoSoggiorno } from '../model/motivoRilascioPermessoSoggiorno';
import { Nazione } from '../model/nazione';
import { ParametriCalcoloProfilingYG } from '../model/parametriCalcoloProfilingYG';
import { ParametriRicercaDisponibilitaIncontri } from '../model/parametriRicercaDisponibilitaIncontri';
import { ParametriRicercaIncontriCalendario } from '../model/parametriRicercaIncontriCalendario';
import { ParametriRicercaPrimaDisponibilitaIncontri } from '../model/parametriRicercaPrimaDisponibilitaIncontri';
import { ParametriSalvataggioIncontro } from '../model/parametriSalvataggioIncontro';
import { ParametriSalvataggioSAP } from '../model/parametriSalvataggioSAP';
import { Parametro } from '../model/parametro';
import { PrenotazioneIncontro } from '../model/prenotazioneIncontro';
import { ProfilingYG } from '../model/profilingYG';
import { Provincia } from '../model/provincia';
import { SchedaAnagraficoProfessionale } from '../model/schedaAnagraficoProfessionale';
import { Sedime } from '../model/sedime';
import { SlotIncontro } from '../model/slotIncontro';
import { StatusExtraUE } from '../model/statusExtraUE';
import { TipoDocumento } from '../model/tipoDocumento';
import { TipoResponsabilita } from '../model/tipoResponsabilita';
import { TitoloStudio } from '../model/titoloStudio';
import { Utente } from '../model/utente';
import { UtenteACarico } from '../model/utenteACarico';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BusinessServiceInterface }                            from './business.serviceInterface';


@Injectable()
export class BusinessService implements BusinessServiceInterface {

    protected basePath = 'http://localhost:8080/restfacade/be';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param id_utente 
     * @param parametri 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public calcolaProfilingYG(id_utente: number, parametri: ParametriCalcoloProfilingYG, observe?: 'body', reportProgress?: boolean): Observable<ProfilingYG>;
    public calcolaProfilingYG(id_utente: number, parametri: ParametriCalcoloProfilingYG, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProfilingYG>>;
    public calcolaProfilingYG(id_utente: number, parametri: ParametriCalcoloProfilingYG, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProfilingYG>>;
    public calcolaProfilingYG(id_utente: number, parametri: ParametriCalcoloProfilingYG, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling calcolaProfilingYG.');
        }
        if (parametri === null || parametri === undefined) {
            throw new Error('Required parameter parametri was null or undefined when calling calcolaProfilingYG.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ProfilingYG>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/calcolo_profiling_yg`,
            parametri,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_documento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDocumento(id_documento: number, observe?: 'body', reportProgress?: boolean): Observable<Esito>;
    public deleteDocumento(id_documento: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Esito>>;
    public deleteDocumento(id_documento: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Esito>>;
    public deleteDocumento(id_documento: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_documento === null || id_documento === undefined) {
            throw new Error('Required parameter id_documento was null or undefined when calling deleteDocumento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<Esito>(`${this.basePath}/documenti/${encodeURIComponent(String(id_documento))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param cod_ambito 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllTipiDocumenti(cod_ambito: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TipoDocumento>>;
    public findAllTipiDocumenti(cod_ambito: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoDocumento>>>;
    public findAllTipiDocumenti(cod_ambito: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoDocumento>>>;
    public findAllTipiDocumenti(cod_ambito: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cod_ambito === null || cod_ambito === undefined) {
            throw new Error('Required parameter cod_ambito was null or undefined when calling findAllTipiDocumenti.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoDocumento>>(`${this.basePath}/decodifiche/tipi_documenti_all/${encodeURIComponent(String(cod_ambito))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametriRicercaDisponibilitaIncontri 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findCalendario(parametriRicercaDisponibilitaIncontri: ParametriRicercaPrimaDisponibilitaIncontri, observe?: 'body', reportProgress?: boolean): Observable<Calendario>;
    public findCalendario(parametriRicercaDisponibilitaIncontri: ParametriRicercaPrimaDisponibilitaIncontri, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Calendario>>;
    public findCalendario(parametriRicercaDisponibilitaIncontri: ParametriRicercaPrimaDisponibilitaIncontri, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Calendario>>;
    public findCalendario(parametriRicercaDisponibilitaIncontri: ParametriRicercaPrimaDisponibilitaIncontri, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (parametriRicercaDisponibilitaIncontri === null || parametriRicercaDisponibilitaIncontri === undefined) {
            throw new Error('Required parameter parametriRicercaDisponibilitaIncontri was null or undefined when calling findCalendario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Calendario>(`${this.basePath}/calendario`,
            parametriRicercaDisponibilitaIncontri,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param cod_ambito 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findDocumenti(id_utente: number, cod_ambito: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Documento>>;
    public findDocumenti(id_utente: number, cod_ambito: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Documento>>>;
    public findDocumenti(id_utente: number, cod_ambito: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Documento>>>;
    public findDocumenti(id_utente: number, cod_ambito: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling findDocumenti.');
        }
        if (cod_ambito === null || cod_ambito === undefined) {
            throw new Error('Required parameter cod_ambito was null or undefined when calling findDocumenti.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Documento>>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/documenti/${encodeURIComponent(String(cod_ambito))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param id_did 
     * @param cod_ambito 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findDocumentiPattiServizio(id_utente: number, id_did: number, cod_ambito: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Documento>>;
    public findDocumentiPattiServizio(id_utente: number, id_did: number, cod_ambito: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Documento>>>;
    public findDocumentiPattiServizio(id_utente: number, id_did: number, cod_ambito: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Documento>>>;
    public findDocumentiPattiServizio(id_utente: number, id_did: number, cod_ambito: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling findDocumentiPattiServizio.');
        }
        if (id_did === null || id_did === undefined) {
            throw new Error('Required parameter id_did was null or undefined when calling findDocumentiPattiServizio.');
        }
        if (cod_ambito === null || cod_ambito === undefined) {
            throw new Error('Required parameter cod_ambito was null or undefined when calling findDocumentiPattiServizio.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Documento>>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/documenti/${encodeURIComponent(String(cod_ambito))}/${encodeURIComponent(String(id_did))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param id_richiesta 
     * @param cod_ambito 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findDocumentiRichiestaIscrizione(id_utente: number, id_richiesta: number, cod_ambito: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Documento>>;
    public findDocumentiRichiestaIscrizione(id_utente: number, id_richiesta: number, cod_ambito: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Documento>>>;
    public findDocumentiRichiestaIscrizione(id_utente: number, id_richiesta: number, cod_ambito: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Documento>>>;
    public findDocumentiRichiestaIscrizione(id_utente: number, id_richiesta: number, cod_ambito: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling findDocumentiRichiestaIscrizione.');
        }
        if (id_richiesta === null || id_richiesta === undefined) {
            throw new Error('Required parameter id_richiesta was null or undefined when calling findDocumentiRichiestaIscrizione.');
        }
        if (cod_ambito === null || cod_ambito === undefined) {
            throw new Error('Required parameter cod_ambito was null or undefined when calling findDocumentiRichiestaIscrizione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Documento>>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/documentiCM/${encodeURIComponent(String(cod_ambito))}/${encodeURIComponent(String(id_richiesta))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findElenchiDecodificheSap(observe?: 'body', reportProgress?: boolean): Observable<ElenchiDecodifiche>;
    public findElenchiDecodificheSap(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ElenchiDecodifiche>>;
    public findElenchiDecodificheSap(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ElenchiDecodifiche>>;
    public findElenchiDecodificheSap(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ElenchiDecodifiche>(`${this.basePath}/decodifiche/decodifiche_sap`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findElencoStatusExtraUE(observe?: 'body', reportProgress?: boolean): Observable<Array<StatusExtraUE>>;
    public findElencoStatusExtraUE(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StatusExtraUE>>>;
    public findElencoStatusExtraUE(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StatusExtraUE>>>;
    public findElencoStatusExtraUE(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<StatusExtraUE>>(`${this.basePath}/decodifiche/status_extra_ue`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param cod_ambito 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findIncontri(id_utente: number, cod_ambito?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PrenotazioneIncontro>>;
    public findIncontri(id_utente: number, cod_ambito?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PrenotazioneIncontro>>>;
    public findIncontri(id_utente: number, cod_ambito?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PrenotazioneIncontro>>>;
    public findIncontri(id_utente: number, cod_ambito?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling findIncontri.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cod_ambito !== undefined && cod_ambito !== null) {
            queryParameters = queryParameters.set('cod_ambito', <any>cod_ambito);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PrenotazioneIncontro>>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/incontri`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param id_calendario identificativo in PSLP_T_CALENDARIO
     * @param parametri_ricerca_incontri_calendario 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findIncontriCalendario(id_utente: number, id_calendario: number, parametri_ricerca_incontri_calendario: ParametriRicercaIncontriCalendario, observe?: 'body', reportProgress?: boolean): Observable<Array<PrenotazioneIncontro>>;
    public findIncontriCalendario(id_utente: number, id_calendario: number, parametri_ricerca_incontri_calendario: ParametriRicercaIncontriCalendario, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PrenotazioneIncontro>>>;
    public findIncontriCalendario(id_utente: number, id_calendario: number, parametri_ricerca_incontri_calendario: ParametriRicercaIncontriCalendario, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PrenotazioneIncontro>>>;
    public findIncontriCalendario(id_utente: number, id_calendario: number, parametri_ricerca_incontri_calendario: ParametriRicercaIncontriCalendario, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling findIncontriCalendario.');
        }
        if (id_calendario === null || id_calendario === undefined) {
            throw new Error('Required parameter id_calendario was null or undefined when calling findIncontriCalendario.');
        }
        if (parametri_ricerca_incontri_calendario === null || parametri_ricerca_incontri_calendario === undefined) {
            throw new Error('Required parameter parametri_ricerca_incontri_calendario was null or undefined when calling findIncontriCalendario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<PrenotazioneIncontro>>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/calendari/${encodeURIComponent(String(id_calendario))}/incontri`,
            parametri_ricerca_incontri_calendario,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param cod_ambito 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findInformazioniAggiuntive(id_utente: number, cod_ambito: string, observe?: 'body', reportProgress?: boolean): Observable<Array<InformazioneAggiuntiva>>;
    public findInformazioniAggiuntive(id_utente: number, cod_ambito: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<InformazioneAggiuntiva>>>;
    public findInformazioniAggiuntive(id_utente: number, cod_ambito: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<InformazioneAggiuntiva>>>;
    public findInformazioniAggiuntive(id_utente: number, cod_ambito: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling findInformazioniAggiuntive.');
        }
        if (cod_ambito === null || cod_ambito === undefined) {
            throw new Error('Required parameter cod_ambito was null or undefined when calling findInformazioniAggiuntive.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cod_ambito !== undefined && cod_ambito !== null) {
            queryParameters = queryParameters.set('cod_ambito', <any>cod_ambito);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<InformazioneAggiuntiva>>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/informazioni_aggiuntive`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametriRicercaDisponibilitaIncontri 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findIntervalloDisponibile(parametriRicercaDisponibilitaIncontri: ParametriRicercaPrimaDisponibilitaIncontri, observe?: 'body', reportProgress?: boolean): Observable<Array<Date>>;
    public findIntervalloDisponibile(parametriRicercaDisponibilitaIncontri: ParametriRicercaPrimaDisponibilitaIncontri, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Date>>>;
    public findIntervalloDisponibile(parametriRicercaDisponibilitaIncontri: ParametriRicercaPrimaDisponibilitaIncontri, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Date>>>;
    public findIntervalloDisponibile(parametriRicercaDisponibilitaIncontri: ParametriRicercaPrimaDisponibilitaIncontri, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (parametriRicercaDisponibilitaIncontri === null || parametriRicercaDisponibilitaIncontri === undefined) {
            throw new Error('Required parameter parametriRicercaDisponibilitaIncontri was null or undefined when calling findIntervalloDisponibile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<Date>>(`${this.basePath}/calendario/intervallo_disponibile`,
            parametriRicercaDisponibilitaIncontri,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findMotiviRilascioPermessoDiSoggiorno(observe?: 'body', reportProgress?: boolean): Observable<Array<MotivoRilascioPermessoSoggiorno>>;
    public findMotiviRilascioPermessoDiSoggiorno(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MotivoRilascioPermessoSoggiorno>>>;
    public findMotiviRilascioPermessoDiSoggiorno(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MotivoRilascioPermessoSoggiorno>>>;
    public findMotiviRilascioPermessoDiSoggiorno(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<MotivoRilascioPermessoSoggiorno>>(`${this.basePath}/decodifiche/motivi_rilascio_permesso_di_soggiorno`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findRiepilogoUtentiIscrizione(id_utente: number, observe?: 'body', reportProgress?: boolean): Observable<EsitoRiepilogoIscrizione>;
    public findRiepilogoUtentiIscrizione(id_utente: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EsitoRiepilogoIscrizione>>;
    public findRiepilogoUtentiIscrizione(id_utente: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EsitoRiepilogoIscrizione>>;
    public findRiepilogoUtentiIscrizione(id_utente: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling findRiepilogoUtentiIscrizione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EsitoRiepilogoIscrizione>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/riepilogo_utenti_iscrizione`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param id_calendario identificativo in PSLP_T_CALENDARIO
     * @param parametri_ricerca_incontri_calendario 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSlotCalendario(id_utente: number, id_calendario: number, parametri_ricerca_incontri_calendario: ParametriRicercaIncontriCalendario, observe?: 'body', reportProgress?: boolean): Observable<Array<SlotIncontro>>;
    public findSlotCalendario(id_utente: number, id_calendario: number, parametri_ricerca_incontri_calendario: ParametriRicercaIncontriCalendario, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SlotIncontro>>>;
    public findSlotCalendario(id_utente: number, id_calendario: number, parametri_ricerca_incontri_calendario: ParametriRicercaIncontriCalendario, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SlotIncontro>>>;
    public findSlotCalendario(id_utente: number, id_calendario: number, parametri_ricerca_incontri_calendario: ParametriRicercaIncontriCalendario, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling findSlotCalendario.');
        }
        if (id_calendario === null || id_calendario === undefined) {
            throw new Error('Required parameter id_calendario was null or undefined when calling findSlotCalendario.');
        }
        if (parametri_ricerca_incontri_calendario === null || parametri_ricerca_incontri_calendario === undefined) {
            throw new Error('Required parameter parametri_ricerca_incontri_calendario was null or undefined when calling findSlotCalendario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<SlotIncontro>>(`${this.basePath}/operatore/${encodeURIComponent(String(id_utente))}/calendari/${encodeURIComponent(String(id_calendario))}/slot`,
            parametri_ricerca_incontri_calendario,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametriRicercaDisponibilitaIncontri 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSlots(parametriRicercaDisponibilitaIncontri: ParametriRicercaDisponibilitaIncontri, observe?: 'body', reportProgress?: boolean): Observable<Array<SlotIncontro>>;
    public findSlots(parametriRicercaDisponibilitaIncontri: ParametriRicercaDisponibilitaIncontri, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SlotIncontro>>>;
    public findSlots(parametriRicercaDisponibilitaIncontri: ParametriRicercaDisponibilitaIncontri, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SlotIncontro>>>;
    public findSlots(parametriRicercaDisponibilitaIncontri: ParametriRicercaDisponibilitaIncontri, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (parametriRicercaDisponibilitaIncontri === null || parametriRicercaDisponibilitaIncontri === undefined) {
            throw new Error('Required parameter parametriRicercaDisponibilitaIncontri was null or undefined when calling findSlots.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<SlotIncontro>>(`${this.basePath}/calendario/slots`,
            parametriRicercaDisponibilitaIncontri,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param cod_ambito 
     * @param cod_tipo_utente tipologia di utente CIT, APL, CPI, REG
     * @param codice_ministeriale_comune_domicilio 
     * @param codice_ministeriale_comune_residenza 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSportelli(cod_ambito: string, cod_tipo_utente: string, codice_ministeriale_comune_domicilio?: string, codice_ministeriale_comune_residenza?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Ente>>;
    public findSportelli(cod_ambito: string, cod_tipo_utente: string, codice_ministeriale_comune_domicilio?: string, codice_ministeriale_comune_residenza?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Ente>>>;
    public findSportelli(cod_ambito: string, cod_tipo_utente: string, codice_ministeriale_comune_domicilio?: string, codice_ministeriale_comune_residenza?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Ente>>>;
    public findSportelli(cod_ambito: string, cod_tipo_utente: string, codice_ministeriale_comune_domicilio?: string, codice_ministeriale_comune_residenza?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cod_ambito === null || cod_ambito === undefined) {
            throw new Error('Required parameter cod_ambito was null or undefined when calling findSportelli.');
        }
        if (cod_tipo_utente === null || cod_tipo_utente === undefined) {
            throw new Error('Required parameter cod_tipo_utente was null or undefined when calling findSportelli.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cod_ambito !== undefined && cod_ambito !== null) {
            queryParameters = queryParameters.set('cod_ambito', <any>cod_ambito);
        }
        if (cod_tipo_utente !== undefined && cod_tipo_utente !== null) {
            queryParameters = queryParameters.set('cod_tipo_utente', <any>cod_tipo_utente);
        }
        if (codice_ministeriale_comune_domicilio !== undefined && codice_ministeriale_comune_domicilio !== null) {
            queryParameters = queryParameters.set('codice_ministeriale_comune_domicilio', <any>codice_ministeriale_comune_domicilio);
        }
        if (codice_ministeriale_comune_residenza !== undefined && codice_ministeriale_comune_residenza !== null) {
            queryParameters = queryParameters.set('codice_ministeriale_comune_residenza', <any>codice_ministeriale_comune_residenza);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Ente>>(`${this.basePath}/calendario/sportelli`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param cod_ambito 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findTipiDocumenti(cod_ambito: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TipoDocumento>>;
    public findTipiDocumenti(cod_ambito: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoDocumento>>>;
    public findTipiDocumenti(cod_ambito: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoDocumento>>>;
    public findTipiDocumenti(cod_ambito: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cod_ambito === null || cod_ambito === undefined) {
            throw new Error('Required parameter cod_ambito was null or undefined when calling findTipiDocumenti.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoDocumento>>(`${this.basePath}/decodifiche/tipi_documenti/${encodeURIComponent(String(cod_ambito))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findTipiResponsabilita(observe?: 'body', reportProgress?: boolean): Observable<Array<TipoResponsabilita>>;
    public findTipiResponsabilita(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoResponsabilita>>>;
    public findTipiResponsabilita(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoResponsabilita>>>;
    public findTipiResponsabilita(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoResponsabilita>>(`${this.basePath}/decodifiche/tipi_responsabilita`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findTutori(id_utente: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Utente>>;
    public findTutori(id_utente: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Utente>>>;
    public findTutori(id_utente: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Utente>>>;
    public findTutori(id_utente: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling findTutori.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Utente>>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/responsabili`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findUtentiACarico(id_utente: number, observe?: 'body', reportProgress?: boolean): Observable<Array<UtenteACarico>>;
    public findUtentiACarico(id_utente: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UtenteACarico>>>;
    public findUtentiACarico(id_utente: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UtenteACarico>>>;
    public findUtentiACarico(id_utente: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling findUtentiACarico.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<UtenteACarico>>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/utenti_a_carico`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdesioneYG(id_utente: number, observe?: 'body', reportProgress?: boolean): Observable<AdesioneYG>;
    public getAdesioneYG(id_utente: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AdesioneYG>>;
    public getAdesioneYG(id_utente: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AdesioneYG>>;
    public getAdesioneYG(id_utente: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling getAdesioneYG.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AdesioneYG>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/adesione`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_silp 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdesioneYGBySILP(id_silp: number, observe?: 'body', reportProgress?: boolean): Observable<AdesioneYG>;
    public getAdesioneYGBySILP(id_silp: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AdesioneYG>>;
    public getAdesioneYGBySILP(id_silp: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AdesioneYG>>;
    public getAdesioneYGBySILP(id_silp: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_silp === null || id_silp === undefined) {
            throw new Error('Required parameter id_silp was null or undefined when calling getAdesioneYGBySILP.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AdesioneYG>(`${this.basePath}/utenti/silp/${encodeURIComponent(String(id_silp))}/adesione`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_cpi_silp 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCentriPerImpiego(id_cpi_silp?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<CentroPerImpiego>>;
    public getCentriPerImpiego(id_cpi_silp?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CentroPerImpiego>>>;
    public getCentriPerImpiego(id_cpi_silp?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CentroPerImpiego>>>;
    public getCentriPerImpiego(id_cpi_silp?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id_cpi_silp !== undefined && id_cpi_silp !== null) {
            queryParameters = queryParameters.set('id_cpi_silp', <any>id_cpi_silp);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CentroPerImpiego>>(`${this.basePath}/decodifiche/centri_per_impiego`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCittadinanze(observe?: 'body', reportProgress?: boolean): Observable<Array<Cittadinanza>>;
    public getCittadinanze(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cittadinanza>>>;
    public getCittadinanze(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cittadinanza>>>;
    public getCittadinanze(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Cittadinanza>>(`${this.basePath}/decodifiche/cittadinanze`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param descrizione 
     * @param codice_provincia 
     * @param id_cpi_silp 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getComuni(descrizione?: string, codice_provincia?: string, id_cpi_silp?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Comune>>;
    public getComuni(descrizione?: string, codice_provincia?: string, id_cpi_silp?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Comune>>>;
    public getComuni(descrizione?: string, codice_provincia?: string, id_cpi_silp?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Comune>>>;
    public getComuni(descrizione?: string, codice_provincia?: string, id_cpi_silp?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (descrizione !== undefined && descrizione !== null) {
            queryParameters = queryParameters.set('descrizione', <any>descrizione);
        }
        if (codice_provincia !== undefined && codice_provincia !== null) {
            queryParameters = queryParameters.set('codice_provincia', <any>codice_provincia);
        }
        if (id_cpi_silp !== undefined && id_cpi_silp !== null) {
            queryParameters = queryParameters.set('id_cpi_silp', <any>id_cpi_silp);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Comune>>(`${this.basePath}/decodifiche/comuni`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCondizioniOccupazionali(observe?: 'body', reportProgress?: boolean): Observable<Array<CondizioneOccupazionale>>;
    public getCondizioniOccupazionali(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CondizioneOccupazionale>>>;
    public getCondizioniOccupazionali(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CondizioneOccupazionale>>>;
    public getCondizioniOccupazionali(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CondizioneOccupazionale>>(`${this.basePath}/decodifiche/condizioni_occupazionali`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param cod_ambito 
     * @param flag_all 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConfigurazioniInformazioniAggiuntive(cod_ambito?: string, flag_all?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ConfigurazioneInformazioneAggiuntiva>>;
    public getConfigurazioniInformazioniAggiuntive(cod_ambito?: string, flag_all?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ConfigurazioneInformazioneAggiuntiva>>>;
    public getConfigurazioniInformazioniAggiuntive(cod_ambito?: string, flag_all?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ConfigurazioneInformazioneAggiuntiva>>>;
    public getConfigurazioniInformazioniAggiuntive(cod_ambito?: string, flag_all?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cod_ambito !== undefined && cod_ambito !== null) {
            queryParameters = queryParameters.set('cod_ambito', <any>cod_ambito);
        }
        if (flag_all !== undefined && flag_all !== null) {
            queryParameters = queryParameters.set('flag_all', <any>flag_all);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ConfigurazioneInformazioneAggiuntiva>>(`${this.basePath}/configurazioni/informazioni_aggiuntive`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param codice_ministeriale_comune 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCpiDelComune(codice_ministeriale_comune: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCpiDelComune(codice_ministeriale_comune: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCpiDelComune(codice_ministeriale_comune: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCpiDelComune(codice_ministeriale_comune: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (codice_ministeriale_comune === null || codice_ministeriale_comune === undefined) {
            throw new Error('Required parameter codice_ministeriale_comune was null or undefined when calling getCpiDelComune.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (codice_ministeriale_comune !== undefined && codice_ministeriale_comune !== null) {
            queryParameters = queryParameters.set('codice_ministeriale_comune', <any>codice_ministeriale_comune);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/decodifiche/cpi_del_comune`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param codice_ministeriale_provincia 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCpiDellaProvincia(codice_ministeriale_provincia: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CentroPerImpiego>>;
    public getCpiDellaProvincia(codice_ministeriale_provincia: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CentroPerImpiego>>>;
    public getCpiDellaProvincia(codice_ministeriale_provincia: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CentroPerImpiego>>>;
    public getCpiDellaProvincia(codice_ministeriale_provincia: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (codice_ministeriale_provincia === null || codice_ministeriale_provincia === undefined) {
            throw new Error('Required parameter codice_ministeriale_provincia was null or undefined when calling getCpiDellaProvincia.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (codice_ministeriale_provincia !== undefined && codice_ministeriale_provincia !== null) {
            queryParameters = queryParameters.set('codice_ministeriale_provincia', <any>codice_ministeriale_provincia);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CentroPerImpiego>>(`${this.basePath}/decodifiche/cpi_della_provincia`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDatiResponsabile(id_utente: number, observe?: 'body', reportProgress?: boolean): Observable<SchedaAnagraficoProfessionale>;
    public getDatiResponsabile(id_utente: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SchedaAnagraficoProfessionale>>;
    public getDatiResponsabile(id_utente: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SchedaAnagraficoProfessionale>>;
    public getDatiResponsabile(id_utente: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling getDatiResponsabile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SchedaAnagraficoProfessionale>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/dati_responsabile`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDomandaRDC(id_utente: number, observe?: 'body', reportProgress?: boolean): Observable<DomandaRDC>;
    public getDomandaRDC(id_utente: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DomandaRDC>>;
    public getDomandaRDC(id_utente: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DomandaRDC>>;
    public getDomandaRDC(id_utente: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling getDomandaRDC.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DomandaRDC>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/domandardc`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_silp 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDomandaRDCBySILP(id_silp: number, observe?: 'body', reportProgress?: boolean): Observable<DomandaRDC>;
    public getDomandaRDCBySILP(id_silp: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DomandaRDC>>;
    public getDomandaRDCBySILP(id_silp: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DomandaRDC>>;
    public getDomandaRDCBySILP(id_silp: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_silp === null || id_silp === undefined) {
            throw new Error('Required parameter id_silp was null or undefined when calling getDomandaRDCBySILP.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DomandaRDC>(`${this.basePath}/utenti/silp/${encodeURIComponent(String(id_silp))}/domandardc`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGradiStudio(observe?: 'body', reportProgress?: boolean): Observable<Array<GradoStudio>>;
    public getGradiStudio(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GradoStudio>>>;
    public getGradiStudio(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GradoStudio>>>;
    public getGradiStudio(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<GradoStudio>>(`${this.basePath}/decodifiche/gradi_studio`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGradiStudioSilp(observe?: 'body', reportProgress?: boolean): Observable<Array<GradoStudio>>;
    public getGradiStudioSilp(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GradoStudio>>>;
    public getGradiStudioSilp(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GradoStudio>>>;
    public getGradiStudioSilp(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<GradoStudio>>(`${this.basePath}/decodifiche/gradi_studio_silp`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMotiviPresenzaInItalia(observe?: 'body', reportProgress?: boolean): Observable<Array<MotivoPresenzaInItalia>>;
    public getMotiviPresenzaInItalia(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MotivoPresenzaInItalia>>>;
    public getMotiviPresenzaInItalia(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MotivoPresenzaInItalia>>>;
    public getMotiviPresenzaInItalia(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<MotivoPresenzaInItalia>>(`${this.basePath}/decodifiche/motivi_presenza_in_italia`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNazioni(observe?: 'body', reportProgress?: boolean): Observable<Array<Nazione>>;
    public getNazioni(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Nazione>>>;
    public getNazioni(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Nazione>>>;
    public getNazioni(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Nazione>>(`${this.basePath}/decodifiche/nazioni`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param cod_parametro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getParametro(cod_parametro: string, observe?: 'body', reportProgress?: boolean): Observable<Parametro>;
    public getParametro(cod_parametro: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Parametro>>;
    public getParametro(cod_parametro: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Parametro>>;
    public getParametro(cod_parametro: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cod_parametro === null || cod_parametro === undefined) {
            throw new Error('Required parameter cod_parametro was null or undefined when calling getParametro.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Parametro>(`${this.basePath}/parametri/${encodeURIComponent(String(cod_parametro))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProfilingYG(id_utente: number, observe?: 'body', reportProgress?: boolean): Observable<ProfilingYG>;
    public getProfilingYG(id_utente: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProfilingYG>>;
    public getProfilingYG(id_utente: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProfilingYG>>;
    public getProfilingYG(id_utente: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling getProfilingYG.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ProfilingYG>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/profiling_yg`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProvince(observe?: 'body', reportProgress?: boolean): Observable<Array<Provincia>>;
    public getProvince(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Provincia>>>;
    public getProvince(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Provincia>>>;
    public getProvince(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Provincia>>(`${this.basePath}/decodifiche/province`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param descrizione 
     * @param codice 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQualificheProfessionali(descrizione: string, codice?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Decodifica>>;
    public getQualificheProfessionali(descrizione: string, codice?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Decodifica>>>;
    public getQualificheProfessionali(descrizione: string, codice?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Decodifica>>>;
    public getQualificheProfessionali(descrizione: string, codice?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (descrizione === null || descrizione === undefined) {
            throw new Error('Required parameter descrizione was null or undefined when calling getQualificheProfessionali.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (codice !== undefined && codice !== null) {
            queryParameters = queryParameters.set('codice', <any>codice);
        }
        if (descrizione !== undefined && descrizione !== null) {
            queryParameters = queryParameters.set('descrizione', <any>descrizione);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Decodifica>>(`${this.basePath}/decodifiche/qualifiche_professionali`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param cod_ambito 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSAP(id_utente: number, cod_ambito?: string, observe?: 'body', reportProgress?: boolean): Observable<SchedaAnagraficoProfessionale>;
    public getSAP(id_utente: number, cod_ambito?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SchedaAnagraficoProfessionale>>;
    public getSAP(id_utente: number, cod_ambito?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SchedaAnagraficoProfessionale>>;
    public getSAP(id_utente: number, cod_ambito?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling getSAP.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cod_ambito !== undefined && cod_ambito !== null) {
            queryParameters = queryParameters.set('cod_ambito', <any>cod_ambito);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SchedaAnagraficoProfessionale>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/sap`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_silp 
     * @param cod_ambito 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSAPBySILP(id_silp: number, cod_ambito?: string, observe?: 'body', reportProgress?: boolean): Observable<SchedaAnagraficoProfessionale>;
    public getSAPBySILP(id_silp: number, cod_ambito?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SchedaAnagraficoProfessionale>>;
    public getSAPBySILP(id_silp: number, cod_ambito?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SchedaAnagraficoProfessionale>>;
    public getSAPBySILP(id_silp: number, cod_ambito?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_silp === null || id_silp === undefined) {
            throw new Error('Required parameter id_silp was null or undefined when calling getSAPBySILP.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cod_ambito !== undefined && cod_ambito !== null) {
            queryParameters = queryParameters.set('cod_ambito', <any>cod_ambito);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SchedaAnagraficoProfessionale>(`${this.basePath}/utenti/silp/${encodeURIComponent(String(id_silp))}/sap`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSAPVuota(id_utente: number, observe?: 'body', reportProgress?: boolean): Observable<SchedaAnagraficoProfessionale>;
    public getSAPVuota(id_utente: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SchedaAnagraficoProfessionale>>;
    public getSAPVuota(id_utente: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SchedaAnagraficoProfessionale>>;
    public getSAPVuota(id_utente: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling getSAPVuota.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SchedaAnagraficoProfessionale>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/sap_vuota`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSedimi(observe?: 'body', reportProgress?: boolean): Observable<Array<Sedime>>;
    public getSedimi(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Sedime>>>;
    public getSedimi(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Sedime>>>;
    public getSedimi(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Sedime>>(`${this.basePath}/decodifiche/sedimi`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_grado_studio_silp 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTitoliStudio(id_grado_studio_silp?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TitoloStudio>>;
    public getTitoliStudio(id_grado_studio_silp?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TitoloStudio>>>;
    public getTitoliStudio(id_grado_studio_silp?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TitoloStudio>>>;
    public getTitoliStudio(id_grado_studio_silp?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id_grado_studio_silp !== undefined && id_grado_studio_silp !== null) {
            queryParameters = queryParameters.set('id_grado_studio_silp', <any>id_grado_studio_silp);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TitoloStudio>>(`${this.basePath}/decodifiche/titoli_studio`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_grado_studio_silp 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTitoliStudioSilp(id_grado_studio_silp?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TitoloStudio>>;
    public getTitoliStudioSilp(id_grado_studio_silp?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TitoloStudio>>>;
    public getTitoliStudioSilp(id_grado_studio_silp?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TitoloStudio>>>;
    public getTitoliStudioSilp(id_grado_studio_silp?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id_grado_studio_silp !== undefined && id_grado_studio_silp !== null) {
            queryParameters = queryParameters.set('id_grado_studio_silp', <any>id_grado_studio_silp);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TitoloStudio>>(`${this.basePath}/decodifiche/titoli_studio_silp`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param codice_fiscale 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUtenteByCf(codice_fiscale: string, observe?: 'body', reportProgress?: boolean): Observable<Utente>;
    public getUtenteByCf(codice_fiscale: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Utente>>;
    public getUtenteByCf(codice_fiscale: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Utente>>;
    public getUtenteByCf(codice_fiscale: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (codice_fiscale === null || codice_fiscale === undefined) {
            throw new Error('Required parameter codice_fiscale was null or undefined when calling getUtenteByCf.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Utente>(`${this.basePath}/utenti/${encodeURIComponent(String(codice_fiscale))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUtenteById(id_utente: number, observe?: 'body', reportProgress?: boolean): Observable<Utente>;
    public getUtenteById(id_utente: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Utente>>;
    public getUtenteById(id_utente: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Utente>>;
    public getUtenteById(id_utente: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling getUtenteById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Utente>(`${this.basePath}/utenti/id/${encodeURIComponent(String(id_utente))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_documento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadDocumento(id_documento: number, observe?: 'body', reportProgress?: boolean): Observable<Documento>;
    public loadDocumento(id_documento: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Documento>>;
    public loadDocumento(id_documento: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Documento>>;
    public loadDocumento(id_documento: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_documento === null || id_documento === undefined) {
            throw new Error('Required parameter id_documento was null or undefined when calling loadDocumento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Documento>(`${this.basePath}/documenti/${encodeURIComponent(String(id_documento))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadDomandeDidPage(observe?: 'body', reportProgress?: boolean): Observable<DomandeDidPage>;
    public loadDomandeDidPage(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DomandeDidPage>>;
    public loadDomandeDidPage(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DomandeDidPage>>;
    public loadDomandeDidPage(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DomandeDidPage>(`${this.basePath}/menu/domande_did`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param cod_menu 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadMenu(cod_menu: string, observe?: 'body', reportProgress?: boolean): Observable<Array<MenuHomeCard>>;
    public loadMenu(cod_menu: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MenuHomeCard>>>;
    public loadMenu(cod_menu: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MenuHomeCard>>>;
    public loadMenu(cod_menu: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cod_menu === null || cod_menu === undefined) {
            throw new Error('Required parameter cod_menu was null or undefined when calling loadMenu.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<MenuHomeCard>>(`${this.basePath}/menu/${encodeURIComponent(String(cod_menu))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param cod_help 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadMenuHelpPage(cod_help: string, observe?: 'body', reportProgress?: boolean): Observable<MenuHelpPage>;
    public loadMenuHelpPage(cod_help: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MenuHelpPage>>;
    public loadMenuHelpPage(cod_help: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MenuHelpPage>>;
    public loadMenuHelpPage(cod_help: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cod_help === null || cod_help === undefined) {
            throw new Error('Required parameter cod_help was null or undefined when calling loadMenuHelpPage.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<MenuHelpPage>(`${this.basePath}/menu/help/${encodeURIComponent(String(cod_help))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param cod_messaggio 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadMessaggio(cod_messaggio: string, observe?: 'body', reportProgress?: boolean): Observable<Messaggio>;
    public loadMessaggio(cod_messaggio: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Messaggio>>;
    public loadMessaggio(cod_messaggio: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Messaggio>>;
    public loadMessaggio(cod_messaggio: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cod_messaggio === null || cod_messaggio === undefined) {
            throw new Error('Required parameter cod_messaggio was null or undefined when calling loadMessaggio.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Messaggio>(`${this.basePath}/messaggi/${encodeURIComponent(String(cod_messaggio))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param documento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveDocumento(documento: Documento, observe?: 'body', reportProgress?: boolean): Observable<Esito>;
    public saveDocumento(documento: Documento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Esito>>;
    public saveDocumento(documento: Documento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Esito>>;
    public saveDocumento(documento: Documento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (documento === null || documento === undefined) {
            throw new Error('Required parameter documento was null or undefined when calling saveDocumento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Esito>(`${this.basePath}/documenti/save_documento`,
            documento,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametriSalvataggioIncontro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveIncontro(parametriSalvataggioIncontro: ParametriSalvataggioIncontro, observe?: 'body', reportProgress?: boolean): Observable<EsitoSalvataggioIncontro>;
    public saveIncontro(parametriSalvataggioIncontro: ParametriSalvataggioIncontro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EsitoSalvataggioIncontro>>;
    public saveIncontro(parametriSalvataggioIncontro: ParametriSalvataggioIncontro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EsitoSalvataggioIncontro>>;
    public saveIncontro(parametriSalvataggioIncontro: ParametriSalvataggioIncontro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (parametriSalvataggioIncontro === null || parametriSalvataggioIncontro === undefined) {
            throw new Error('Required parameter parametriSalvataggioIncontro was null or undefined when calling saveIncontro.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EsitoSalvataggioIncontro>(`${this.basePath}/calendario/save_incontro`,
            parametriSalvataggioIncontro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param informazione_aggiuntiva 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveInformazioniAggiuntive(id_utente: number, informazione_aggiuntiva: InformazioneAggiuntiva, observe?: 'body', reportProgress?: boolean): Observable<InformazioneAggiuntiva>;
    public saveInformazioniAggiuntive(id_utente: number, informazione_aggiuntiva: InformazioneAggiuntiva, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InformazioneAggiuntiva>>;
    public saveInformazioniAggiuntive(id_utente: number, informazione_aggiuntiva: InformazioneAggiuntiva, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InformazioneAggiuntiva>>;
    public saveInformazioniAggiuntive(id_utente: number, informazione_aggiuntiva: InformazioneAggiuntiva, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling saveInformazioniAggiuntive.');
        }
        if (informazione_aggiuntiva === null || informazione_aggiuntiva === undefined) {
            throw new Error('Required parameter informazione_aggiuntiva was null or undefined when calling saveInformazioniAggiuntive.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<InformazioneAggiuntiva>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/save_informazioni_aggiuntive`,
            informazione_aggiuntiva,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveResponsabile(id_utente: number, utente: SchedaAnagraficoProfessionale, observe?: 'body', reportProgress?: boolean): Observable<Esito>;
    public saveResponsabile(id_utente: number, utente: SchedaAnagraficoProfessionale, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Esito>>;
    public saveResponsabile(id_utente: number, utente: SchedaAnagraficoProfessionale, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Esito>>;
    public saveResponsabile(id_utente: number, utente: SchedaAnagraficoProfessionale, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling saveResponsabile.');
        }
        if (utente === null || utente === undefined) {
            throw new Error('Required parameter utente was null or undefined when calling saveResponsabile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Esito>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/save_dati_responsabile`,
            utente,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param parametri_sap 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveSAP(id_utente: number, parametri_sap: ParametriSalvataggioSAP, observe?: 'body', reportProgress?: boolean): Observable<Esito>;
    public saveSAP(id_utente: number, parametri_sap: ParametriSalvataggioSAP, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Esito>>;
    public saveSAP(id_utente: number, parametri_sap: ParametriSalvataggioSAP, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Esito>>;
    public saveSAP(id_utente: number, parametri_sap: ParametriSalvataggioSAP, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling saveSAP.');
        }
        if (parametri_sap === null || parametri_sap === undefined) {
            throw new Error('Required parameter parametri_sap was null or undefined when calling saveSAP.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Esito>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/save_sap`,
            parametri_sap,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param documento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveStatoDocumento(documento: Documento, observe?: 'body', reportProgress?: boolean): Observable<Esito>;
    public saveStatoDocumento(documento: Documento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Esito>>;
    public saveStatoDocumento(documento: Documento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Esito>>;
    public saveStatoDocumento(documento: Documento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (documento === null || documento === undefined) {
            throw new Error('Required parameter documento was null or undefined when calling saveStatoDocumento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Esito>(`${this.basePath}/documenti/save_stato_documento`,
            documento,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveUtente(utente: Utente, observe?: 'body', reportProgress?: boolean): Observable<Utente>;
    public saveUtente(utente: Utente, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Utente>>;
    public saveUtente(utente: Utente, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Utente>>;
    public saveUtente(utente: Utente, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (utente === null || utente === undefined) {
            throw new Error('Required parameter utente was null or undefined when calling saveUtente.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Utente>(`${this.basePath}/utenti`,
            utente,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveUtenteACarico(id_utente: number, utente: UtenteACarico, observe?: 'body', reportProgress?: boolean): Observable<Esito>;
    public saveUtenteACarico(id_utente: number, utente: UtenteACarico, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Esito>>;
    public saveUtenteACarico(id_utente: number, utente: UtenteACarico, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Esito>>;
    public saveUtenteACarico(id_utente: number, utente: UtenteACarico, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling saveUtenteACarico.');
        }
        if (utente === null || utente === undefined) {
            throw new Error('Required parameter utente was null or undefined when calling saveUtenteACarico.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Esito>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/save_utente_a_carico`,
            utente,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param parametri_sendStatoAdesione 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendStatoAdesione(id_utente: number, parametri_sendStatoAdesione: DatiInputStatoAdesione, observe?: 'body', reportProgress?: boolean): Observable<EsitoSendStatoAdesione>;
    public sendStatoAdesione(id_utente: number, parametri_sendStatoAdesione: DatiInputStatoAdesione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EsitoSendStatoAdesione>>;
    public sendStatoAdesione(id_utente: number, parametri_sendStatoAdesione: DatiInputStatoAdesione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EsitoSendStatoAdesione>>;
    public sendStatoAdesione(id_utente: number, parametri_sendStatoAdesione: DatiInputStatoAdesione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling sendStatoAdesione.');
        }
        if (parametri_sendStatoAdesione === null || parametri_sendStatoAdesione === undefined) {
            throw new Error('Required parameter parametri_sendStatoAdesione was null or undefined when calling sendStatoAdesione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EsitoSendStatoAdesione>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/send_stato_adesioneGG`,
            parametri_sendStatoAdesione,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param codice_fiscale 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public verificaEsistenzaSAPSuSistemaMinisteriale(codice_fiscale: string, observe?: 'body', reportProgress?: boolean): Observable<EsitoVerificaEsistenzaSap>;
    public verificaEsistenzaSAPSuSistemaMinisteriale(codice_fiscale: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EsitoVerificaEsistenzaSap>>;
    public verificaEsistenzaSAPSuSistemaMinisteriale(codice_fiscale: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EsitoVerificaEsistenzaSap>>;
    public verificaEsistenzaSAPSuSistemaMinisteriale(codice_fiscale: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (codice_fiscale === null || codice_fiscale === undefined) {
            throw new Error('Required parameter codice_fiscale was null or undefined when calling verificaEsistenzaSAPSuSistemaMinisteriale.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EsitoVerificaEsistenzaSap>(`${this.basePath}/utenti/verificaesistenzasap/${encodeURIComponent(String(codice_fiscale))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param codice_fiscale 
     * @param cod_ambito 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public verificaMinore(id_utente: number, codice_fiscale: string, cod_ambito: string, observe?: 'body', reportProgress?: boolean): Observable<EsitoVerificaMinore>;
    public verificaMinore(id_utente: number, codice_fiscale: string, cod_ambito: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EsitoVerificaMinore>>;
    public verificaMinore(id_utente: number, codice_fiscale: string, cod_ambito: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EsitoVerificaMinore>>;
    public verificaMinore(id_utente: number, codice_fiscale: string, cod_ambito: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling verificaMinore.');
        }
        if (codice_fiscale === null || codice_fiscale === undefined) {
            throw new Error('Required parameter codice_fiscale was null or undefined when calling verificaMinore.');
        }
        if (cod_ambito === null || cod_ambito === undefined) {
            throw new Error('Required parameter cod_ambito was null or undefined when calling verificaMinore.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cod_ambito !== undefined && cod_ambito !== null) {
            queryParameters = queryParameters.set('cod_ambito', <any>cod_ambito);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EsitoVerificaMinore>(`${this.basePath}/utenti/${encodeURIComponent(String(id_utente))}/verifica_minore/${encodeURIComponent(String(codice_fiscale))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
