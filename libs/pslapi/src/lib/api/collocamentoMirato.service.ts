/**
 * Portale Servizi Lavoro API
 * API per il backend del portale servizi lavoro.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ConfigurazioneCollocamentoMirato } from '../model/configurazioneCollocamentoMirato';
import { ConfigurazioneFamiliariACarico } from '../model/configurazioneFamiliariACarico';
import { DatiInputSaveRichiestaIscrizioneCollocamentoMirato } from '../model/datiInputSaveRichiestaIscrizioneCollocamentoMirato';
import { DettaglioCompletoDichiarazioneFamiliariACarico } from '../model/dettaglioCompletoDichiarazioneFamiliariACarico';
import { ErrorDef } from '../model/errorDef';
import { EsitoRicercaRichiestaIscrizioneCollocamentoMirato } from '../model/esitoRicercaRichiestaIscrizioneCollocamentoMirato';
import { EsitoRiepilogoCollocamentoMirato } from '../model/esitoRiepilogoCollocamentoMirato';
import { EsitoSalvataggioRedditoCollocamentoMirato } from '../model/esitoSalvataggioRedditoCollocamentoMirato';
import { EsitoSaveDichiarazione } from '../model/esitoSaveDichiarazione';
import { EsitoSaveRichiestaIscrizioneCollocamentoMirato } from '../model/esitoSaveRichiestaIscrizioneCollocamentoMirato';
import { ParametriSalvataggioRedditoCollocamentoMirato } from '../model/parametriSalvataggioRedditoCollocamentoMirato';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { CollocamentoMiratoServiceInterface }                            from './collocamentoMirato.serviceInterface';


@Injectable()
export class CollocamentoMiratoService implements CollocamentoMiratoServiceInterface {

    protected basePath = 'http://localhost:8080/restfacade/be';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param id_utente 
     * @param id_richiesta 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findRichiestaIscrizioneCollocamentoMirato(id_utente: number, id_richiesta?: number, observe?: 'body', reportProgress?: boolean): Observable<EsitoRicercaRichiestaIscrizioneCollocamentoMirato>;
    public findRichiestaIscrizioneCollocamentoMirato(id_utente: number, id_richiesta?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EsitoRicercaRichiestaIscrizioneCollocamentoMirato>>;
    public findRichiestaIscrizioneCollocamentoMirato(id_utente: number, id_richiesta?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EsitoRicercaRichiestaIscrizioneCollocamentoMirato>>;
    public findRichiestaIscrizioneCollocamentoMirato(id_utente: number, id_richiesta?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling findRichiestaIscrizioneCollocamentoMirato.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id_richiesta !== undefined && id_richiesta !== null) {
            queryParameters = queryParameters.set('id_richiesta', <any>id_richiesta);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EsitoRicercaRichiestaIscrizioneCollocamentoMirato>(`${this.basePath}/collocamento_mirato/${encodeURIComponent(String(id_utente))}/find_richiesta_iscrizione_collocamento_mirato`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRiepilogoCollocamentoMirato(id_utente: number, observe?: 'body', reportProgress?: boolean): Observable<EsitoRiepilogoCollocamentoMirato>;
    public getRiepilogoCollocamentoMirato(id_utente: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EsitoRiepilogoCollocamentoMirato>>;
    public getRiepilogoCollocamentoMirato(id_utente: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EsitoRiepilogoCollocamentoMirato>>;
    public getRiepilogoCollocamentoMirato(id_utente: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling getRiepilogoCollocamentoMirato.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EsitoRiepilogoCollocamentoMirato>(`${this.basePath}/collocamento_mirato/${encodeURIComponent(String(id_utente))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadConfigurazioneFamiliariACarico(observe?: 'body', reportProgress?: boolean): Observable<ConfigurazioneFamiliariACarico>;
    public loadConfigurazioneFamiliariACarico(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurazioneFamiliariACarico>>;
    public loadConfigurazioneFamiliariACarico(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurazioneFamiliariACarico>>;
    public loadConfigurazioneFamiliariACarico(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ConfigurazioneFamiliariACarico>(`${this.basePath}/collocamento_mirato/configurazione_familiari_a_carico`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadConfigurazioniCollocamentoMirato(observe?: 'body', reportProgress?: boolean): Observable<ConfigurazioneCollocamentoMirato>;
    public loadConfigurazioniCollocamentoMirato(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurazioneCollocamentoMirato>>;
    public loadConfigurazioniCollocamentoMirato(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurazioneCollocamentoMirato>>;
    public loadConfigurazioniCollocamentoMirato(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ConfigurazioneCollocamentoMirato>(`${this.basePath}/collocamento_mirato/configurazione_collocamento_mirato`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param messaggio 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveFamiliariACarico(id_utente: number, messaggio: DettaglioCompletoDichiarazioneFamiliariACarico, observe?: 'body', reportProgress?: boolean): Observable<EsitoSaveDichiarazione>;
    public saveFamiliariACarico(id_utente: number, messaggio: DettaglioCompletoDichiarazioneFamiliariACarico, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EsitoSaveDichiarazione>>;
    public saveFamiliariACarico(id_utente: number, messaggio: DettaglioCompletoDichiarazioneFamiliariACarico, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EsitoSaveDichiarazione>>;
    public saveFamiliariACarico(id_utente: number, messaggio: DettaglioCompletoDichiarazioneFamiliariACarico, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling saveFamiliariACarico.');
        }
        if (messaggio === null || messaggio === undefined) {
            throw new Error('Required parameter messaggio was null or undefined when calling saveFamiliariACarico.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EsitoSaveDichiarazione>(`${this.basePath}/collocamento_mirato/${encodeURIComponent(String(id_utente))}/save_dichiarazione`,
            messaggio,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param parametriReddito 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveRedditoCollocamentoMirato(id_utente: number, parametriReddito: ParametriSalvataggioRedditoCollocamentoMirato, observe?: 'body', reportProgress?: boolean): Observable<EsitoSalvataggioRedditoCollocamentoMirato>;
    public saveRedditoCollocamentoMirato(id_utente: number, parametriReddito: ParametriSalvataggioRedditoCollocamentoMirato, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EsitoSalvataggioRedditoCollocamentoMirato>>;
    public saveRedditoCollocamentoMirato(id_utente: number, parametriReddito: ParametriSalvataggioRedditoCollocamentoMirato, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EsitoSalvataggioRedditoCollocamentoMirato>>;
    public saveRedditoCollocamentoMirato(id_utente: number, parametriReddito: ParametriSalvataggioRedditoCollocamentoMirato, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling saveRedditoCollocamentoMirato.');
        }
        if (parametriReddito === null || parametriReddito === undefined) {
            throw new Error('Required parameter parametriReddito was null or undefined when calling saveRedditoCollocamentoMirato.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EsitoSalvataggioRedditoCollocamentoMirato>(`${this.basePath}/collocamento_mirato/${encodeURIComponent(String(id_utente))}/reddito`,
            parametriReddito,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id_utente 
     * @param parametri_richiesta 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveRichiestaIscrizioneCollocamentoMirato(id_utente: number, parametri_richiesta: DatiInputSaveRichiestaIscrizioneCollocamentoMirato, observe?: 'body', reportProgress?: boolean): Observable<EsitoSaveRichiestaIscrizioneCollocamentoMirato>;
    public saveRichiestaIscrizioneCollocamentoMirato(id_utente: number, parametri_richiesta: DatiInputSaveRichiestaIscrizioneCollocamentoMirato, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EsitoSaveRichiestaIscrizioneCollocamentoMirato>>;
    public saveRichiestaIscrizioneCollocamentoMirato(id_utente: number, parametri_richiesta: DatiInputSaveRichiestaIscrizioneCollocamentoMirato, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EsitoSaveRichiestaIscrizioneCollocamentoMirato>>;
    public saveRichiestaIscrizioneCollocamentoMirato(id_utente: number, parametri_richiesta: DatiInputSaveRichiestaIscrizioneCollocamentoMirato, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling saveRichiestaIscrizioneCollocamentoMirato.');
        }
        if (parametri_richiesta === null || parametri_richiesta === undefined) {
            throw new Error('Required parameter parametri_richiesta was null or undefined when calling saveRichiestaIscrizioneCollocamentoMirato.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EsitoSaveRichiestaIscrizioneCollocamentoMirato>(`${this.basePath}/collocamento_mirato/${encodeURIComponent(String(id_utente))}/save_richiesta_iscrizione_collocamento_mirato`,
            parametri_richiesta,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
